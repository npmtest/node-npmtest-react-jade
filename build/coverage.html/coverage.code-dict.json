{"/home/travis/build/npmtest/node-npmtest-react-jade/test.js":"/* istanbul instrument in package npmtest_react_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-jade/lib.npmtest_react_jade.js":"/* istanbul instrument in package npmtest_react_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_jade = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_jade = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-jade/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-jade && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_jade\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_jade.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_jade.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_jade.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_jade.__dirname + '/lib.npmtest_react_jade.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/index.js":"'use strict';\n\nvar isTemplateLiteral = require('./lib/utils/is-template-literal.js');\nvar browserify = require('./lib/browserify');\nvar compile = require('./lib/compile');\nvar compileFile = require('./lib/compile-file');\nvar compileClient = require('./lib/compile-client');\nvar compileFileClient = require('./lib/compile-file-client');\n\nexports = (module.exports = browserifySupport);\nfunction browserifySupport(options, extra) {\n  if (isTemplateLiteral(options)) {\n    return compile(options.raw[0]);\n  } else {\n    return browserify.apply(this, arguments);\n  }\n}\n\nexports.compile = compile;\nexports.compileFile = compileFile;\nexports.compileClient = compileClient;\nexports.compileFileClient = compileFileClient;\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/is-template-literal.js":"'use strict';\n\nmodule.exports = isTemplateLiteral;\nfunction isTemplateLiteral(str) {\n  return str && typeof str === 'object' &&\n    str.raw && typeof str.raw === 'object' &&\n    str.raw.length === 1 && typeof str.raw[0] === 'string';\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/browserify.js":"'use strict';\n\nvar Transform = require('stream').Transform;\nvar PassThrough = require('stream').PassThrough;\nvar staticModule = require('static-module');\nvar resolve = require('resolve');\nvar path = require('path');\nvar stringify = require('js-stringify');\nvar isTemplateLiteral = require('./utils/is-template-literal.js');\nvar acornTransform = require('./utils/acorn-transform.js');\nvar compileClient = require('./compile-client.js');\nvar compileFileClient = require('./compile-file-client.js');\n\nmodule.exports = browserify;\nfunction browserify(options, extra) {\n  if (typeof options === 'string') {\n    var filename = options;\n    options = extra || {};\n    return makeStream(function (source) {\n      return transform(filename, source, options);\n    });\n  } else {\n    options = options || {};\n    return function (filename, extra) {\n      extra = extra || {};\n      Object.keys(options).forEach(function (key) {\n        if (typeof extra[key] === 'undefined') {\n          extra[key] = options[key];\n        }\n      });\n      return makeStream(function (source) {\n        return transform(filename, source, options);\n      });\n    };\n  }\n}\n\nfunction makeStream(fn) {\n  var src = '';\n  var stream = new Transform();\n  stream._transform = function (chunk, encoding, callback) {\n    src += chunk;\n    callback();\n  };\n  stream._flush = function (callback) {\n    try {\n      var res = fn(src);\n      res.on('data', this.push.bind(this));\n      res.on('error', callback);\n      res.on('end', callback.bind(null, null));\n    } catch (err) {\n      callback(err);\n    }\n  };\n  return stream;\n}\n\nfunction makeClientRequire(filename) {\n  function cr(path) {\n    return require(cr.resolve(path));\n  }\n  cr.resolve = function (path) {\n    return resolve.sync(path, {\n      basedir: path.dirname(filename)\n    });\n  };\n  return cr;\n}\n\nfunction makeStaticImplementation(filename, options) {\n  function staticImplementation(templateLiteral) {\n    if (isTemplateLiteral(templateLiteral)) {\n      return staticCompileImplementation(templateLiteral.raw[0]);\n    } else {\n      return '(function () { throw new Error(\"Invalid client side argument to react-jade\"); }())';\n    }\n  }\n  function staticCompileImplementation(jadeSrc, localOptions) {\n    localOptions = localOptions || {};\n    for (var key in options) {\n      if ((key in options) && !(key in localOptions))\n      localOptions[key] = options[key];\n    }\n    localOptions.filename = localOptions.filename || filename;\n    localOptions.outputFile = filename;\n    return compileClient(jadeSrc, localOptions);\n  }\n  function staticCompileFileImplementation(jadeFile, localOptions) {\n    localOptions = localOptions || {};\n    for (var key in options) {\n      if ((key in options) && !(key in localOptions))\n      localOptions[key] = options[key];\n    }\n    localOptions.outputFile = filename;\n    return compileFileClient(jadeFile, localOptions);\n  }\n  staticImplementation.compile = staticCompileImplementation;\n  staticImplementation.compileFile = staticCompileFileImplementation;\n  return staticImplementation;\n}\n\n// compile filename and return a readable stream\nfunction transform(filename, source, options) {\n  function templateToJs(template) {\n    return '(function () {' +\n          'var quasi = ' + stringify(template.slice(0)) + ';' +\n          'quasi.raw = ' + stringify(template.raw.slice(0)) + ';' +\n          'return quasi;}())';\n  }\n\n  if (/\\.json$/.test(filename)) {\n    var stream = new PassThrough();\n    stream.end(source);\n    return stream;\n  }\n\n  source = acornTransform(source, {\n    TaggedTemplateExpression: function (node) {\n      var cooked = node.quasi.quasis.map(function (q) {\n        return q.value.cooked;\n      });\n      cooked.raw = node.quasi.quasis.map(function (q) {\n        return q.value.raw;\n      });\n      var quasi = templateToJs(cooked);\n\n      var expressions = node.quasi.expressions.map(acornTransform.getSource);\n\n      acornTransform.setSource(node, acornTransform.getSource(node.tag) + '(' +\n                               [quasi].concat(expressions).join(', ') + ')');\n    }\n  });\n  // var $__0 = Object.freeze(Object.defineProperties([\"\\ndiv\\n  h1 Page not found\"], {raw: {value: Object.freeze([\"\\ndiv\\n  h1 Page not found\"])}}));\n  // var notFound =  jade($__0);\n  function isObjectDot(node, property) {\n    return node.type === 'CallExpression' && node.callee.type === 'MemberExpression'  &&\n      node.callee.object.type === 'Identifier' && node.callee.object.name === 'Object' &&\n      node.callee.computed === false && node.callee.property.type === 'Identifier' &&\n      node.callee.property.name === property;\n  }\n  function isArrayOfStrings(node) {\n    return node.type === 'ArrayExpression' && node.elements.every(function (el) {\n      return el.type === 'Literal' && typeof el.value === 'string';\n    });\n  }\n  function isKeyedObject(node, key) {\n    return node.type === 'ObjectExpression' && node.properties.length === 1 &&\n      node.properties[0].computed === false && node.properties[0].key.type === 'Identifier' &&\n      node.properties[0].key.name === key;\n  }\n  function isTraceuredTemplateLiteral(node) {\n    if (isObjectDot(node, 'freeze') && node.arguments.length === 1 && isObjectDot(node.arguments[0], 'defineProperties')) {\n      var args = node.arguments[0].arguments;\n      if (isArrayOfStrings(args[0]) && isKeyedObject(args[1], 'raw')) {\n        var raw = args[1].properties[0].value;\n        if (isKeyedObject(raw, 'value')) {\n          raw = raw.properties[0].value;\n          if (isObjectDot(raw, 'freeze') && raw.arguments.length === 1 && isArrayOfStrings(raw.arguments[0])) {\n            return Function('', 'return ' + acornTransform.getSource(node))();\n          }\n        }\n      }\n    }\n  }\n\n  var literals = {};\n  source = acornTransform(source, {\n    VariableDeclaration: function (node) {\n      node.declarations.forEach(function (declaration) {\n        if (declaration.id.type === 'Identifier' && declaration.id.name[0] === '$' && declaration.init) {\n          var value = isTraceuredTemplateLiteral(declaration.init);\n          if (value) {\n            literals[declaration.id.name] = value;\n            acornTransform.setSource(declaration.init, 'undefined');\n          }\n        }\n      });\n    },\n    Identifier: function (node) {\n      if (node.name[0] === '$' && node.name in literals) {\n        acornTransform.setSource(node, templateToJs(literals[node.name]));\n      }\n    }\n  });\n\n  var makeStatic = staticModule({ 'react-jade': makeStaticImplementation(filename, options) }, {\n    vars: {\n      __dirname: path.dirname(filename),\n      __filename: path.resolve(filename),\n      path: path,\n      require: makeClientRequire(filename)\n    }\n  });\n  makeStatic.end(source);\n  return makeStatic;\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/acorn-transform.js":"'use strict';\n\nvar acorn = require('acorn');\nvar walk = require('acorn/dist/walk');\n\nmodule.exports = transform;\nfunction transform(src, walker) {\n  try {\n    var ast = acorn.parse(src, {\n      ecmaVersion: 6,\n      allowReturnOutsideFunction: true,\n      allowImportExportEverywhere: true,\n      allowHashBang: true\n    });\n  } catch (ex) {\n    if (typeof ex.loc === 'object' && typeof ex.loc.line === 'number' && typeof ex.loc.column === 'number') {\n      var lines = src.split(/\\n/g);\n\n      ex.message += '\\n\\n  | ' + (lines[ex.loc.line - 2] || '') +\n        '\\n> | ' + (lines[ex.loc.line - 1] || '') +\n        '\\n  | ' + (lines[ex.loc.line] || '');\n    }\n    throw ex;\n  }\n  src = src.split('');\n\n  function getSource(node) {\n    return src.slice(node.start, node.end).join('');\n  }\n  function setSource(node, str) {\n    for (var i = node.start; i < node.end; i++) {\n      src[i] = '';\n    }\n    src[node.start] = str;\n  }\n  module.exports.getSource = getSource;\n  module.exports.setSource = setSource;\n\n  walk.ancestor(ast, walker);\n\n  return src.join('');\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/compile-client.js":"'use strict';\n\nvar path = require('path');\nvar parse = require('./parse');\n\nvar reactRuntimePath;\n\ntry {\n  reactRuntimePath = require.resolve('react');\n} catch (ex) {\n  reactRuntimePath = false;\n}\n\nmodule.exports = compileClient;\nfunction compileClient(str, options){\n  options = options || { filename: '' };\n  var react = options.outputFile ? path.relative(path.dirname(options.outputFile), reactRuntimePath) : reactRuntimePath;\n\n  if (options.globalReact || !reactRuntimePath) {\n    return '(function (React) {\\n  ' +\n      parse(str, options).split('\\n').join('\\n  ') +\n      '\\n}(React))';\n  } else {\n    return '(function (React) {\\n  ' +\n      parse(str, options).split('\\n').join('\\n  ') +\n      '\\n}(typeof React !== \"undefined\" ? React : require(\"' + react.replace(/^([^\\.])/, './$1').replace(/\\\\/g, '/') + '\")))';\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/parse.js":"'use strict';\n\nvar fs = require('fs');\nvar assert = require('assert');\nvar uglify = require('uglify-js');\nvar Parser = require('jade/lib/parser.js');\nvar jade = require('jade/lib/runtime.js');\nvar addWith = require('with');\nvar Compiler = require('./utils/compiler.js');\nvar JavaScriptCompressor = require('./utils/java-script-compressor.js');\n\nvar jade_join_classes = fs.readFileSync(__dirname + '/utils/jade-join-classes.js', 'utf8');\nvar jade_fix_style = fs.readFileSync(__dirname + '/utils/jade-fix-style.js', 'utf8');\nvar jade_fix_attrs = fs.readFileSync(__dirname + '/utils/jade-fix-attrs.js', 'utf8');\nvar jade_merge = fs.readFileSync(__dirname + '/utils/jade-merge.js', 'utf8');\nvar setLocals = fs.readFileSync(__dirname + '/utils/set-locals.js', 'utf8');\n\nmodule.exports = parse;\nfunction parse(str, options) {\n  var options = options || {};\n  var parser = new Parser(str, options.filename, options);\n  var tokens;\n  try {\n    // Parse\n    tokens = parser.parse();\n  } catch (err) {\n    parser = parser.context();\n    jade.rethrow(err, parser.filename, parser.lexer.lineno, parser.input);\n  }\n  var compiler = new Compiler(tokens);\n\n  var src = compiler.compile();\n  src = [\n    jade_join_classes + ';',\n    jade_fix_style + ';',\n    jade_fix_attrs + ';',\n    jade_merge + ';',\n    'var jade_mixins = {};',\n    'var jade_interp;',\n    src\n  ].join('\\n')\n\n  var ast = uglify.parse(';(function () {' + src + '}.call(this));', {\n    filename: options.filename\n  });\n\n  ast.figure_out_scope();\n  ast = ast.transform(uglify.Compressor({\n    sequences: false,   // join consecutive statemets with the “comma operator\"\n    properties: true,   // optimize property access: a[\"foo\"] → a.foo\n    dead_code: true,    // discard unreachable code\n    unsafe: true,       // some unsafe optimizations (see below)\n    conditionals: true, // optimize if-s and conditional expressions\n    comparisons: true,  // optimize comparisonsx\n    evaluate: true,     // evaluate constant expressions\n    booleans: true,     // optimize boolean expressions\n    loops: true,        // optimize loops\n    unused: true,       // drop unused variables/functions\n    hoist_funs: true,   // hoist function declarations\n    hoist_vars: false,  // hoist variable declarations\n    if_return: true,    // optimize if-s followed by return/continue\n    join_vars: false,   // join var declarations\n    cascade: true,      // try to cascade `right` into `left` in sequences\n    side_effects: true, // drop side-effect-free statements\n    warnings: false,     // warn about potentially dangerous optimizations/code\n    global_defs: {}     // global definitions));\n  }));\n\n  ast = ast.transform(new JavaScriptCompressor());\n\n  src = ast.body[0].body.expression.expression.body.map(function (statement) {\n    return statement.print_to_string({\n      beautify: true,\n      comments: true,\n      indent_level: 2\n    });\n  }).join('\\n');\n  src = addWith('locals || {}', src, [\n    'tags',\n    'React',\n    'Array',\n    'undefined'\n  ]);\n  var js = 'var fn = function (locals) {' +\n    'var tags = [];' +\n    src +\n    'if (tags.length === 1 && !Array.isArray(tags[0])) { return tags.pop() };' +\n    'tags.unshift(\"div\", null);' +\n    'return React.createElement.apply(React, tags);' +\n    '}';\n\n  // Check that the compiled JavaScript code is valid thus far.\n  // uglify-js throws very cryptic errors when it fails to parse code.\n  try {\n    Function('', js);\n  } catch (ex) {\n    console.log(js);\n    throw ex;\n  }\n\n  var ast = uglify.parse(js + ';\\nfn.locals = ' + setLocals + ';', {\n    filename: options.filename\n  });\n  js = ast.print_to_string({\n    beautify: true,\n    comments: true,\n    indent_level: 2\n  });\n  return js + ';\\nreturn fn;';\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/compiler.js":"'use strict';\n\nvar fs = require('fs');\nvar constantinople = require('constantinople');\nvar ent = require('ent');\nvar uglify = require('uglify-js');\nvar React = require('react');\nvar stringify = require('js-stringify');\n\nvar joinClasses = Function('', 'return ' + fs.readFileSync(__dirname + '/jade-join-classes.js', 'utf8'))();\nvar fixStyle = Function('', 'return ' + fs.readFileSync(__dirname + '/jade-fix-style.js', 'utf8'))();\n\nfunction isConstant(str) {\n  return constantinople(str);\n}\nfunction toConstant(str) {\n  return constantinople.toConstant(str);\n}\n\nmodule.exports = Compiler;\nfunction Compiler(node) {\n  this.node = node;\n  this.mixins = {};\n  this.dynamicMixins = false;\n}\n\nCompiler.prototype.compile = function(){\n  this.buf = [];\n  this.visit(this.node);\n\n  if (!this.dynamicMixins) {\n    // if there are no dynamic mixins we can remove any un-used mixins\n    var mixinNames = Object.keys(this.mixins);\n    for (var i = 0; i < mixinNames.length; i++) {\n      var mixin = this.mixins[mixinNames[i]];\n      if (!mixin.used) {\n        for (var x = 0; x < mixin.instances.length; x++) {\n          for (var y = mixin.instances[x].start; y < mixin.instances[x].end; y++) {\n            this.buf[y] = '';\n          }\n        }\n      }\n    }\n  }\n  return this.buf.join('\\n');\n};\nCompiler.prototype.visit = function(node){\n  if (typeof this['visit' + node.type] !== 'function') {\n    throw new Error(node.type + ' is not supported');\n  }\n  return this['visit' + node.type](node);\n}\nCompiler.prototype.visitBlock = function(block){\n  for (var i = 0; i < block.nodes.length; i++) {\n    this.visit(block.nodes[i]);\n  }\n}\nCompiler.prototype.visitCode = function (code) {\n  if (code.block && code.buffer) {\n    throw new Error('Not Implemented');\n  }\n  if (code.buffer && !code.escape) {\n    this.buf.push('tags.push(React.createElement(\"div\", {dangerouslySetInnerHTML:{__html: ' + code.val + '}}))');\n  } else if (code.buffer) {\n    this.buf.push('tags.push(' + code.val + ')');\n  } else {\n    this.buf.push(code.val);\n    if (code.block) {\n      this.buf.push('{');\n      this.visit(code.block);\n      this.buf.push('}');\n    }\n  }\n};\nCompiler.prototype.visitComment = function (comment) {\n  this.buf.push('\\n//' + comment.val + '\\n');\n};\nCompiler.prototype.visitBlockComment = function (comment) {\n  this.buf.push('/*');\n  this.buf.push(comment.val);\n  this.visit(comment.block);\n  this.buf.push('*/');\n};\nCompiler.prototype.visitEach = function (each) {\n  this.buf.push(''\n    + '// iterate ' + each.obj + '\\n'\n    + ';tags.push(function(){\\n'\n    + '  var tags = [];\\n'\n    + '  var $$obj = ' + each.obj + ';\\n'\n    + '  if (\\'number\\' == typeof $$obj.length) {\\n');\n\n  if (each.alternative) {\n    this.buf.push('  if ($$obj.length) {');\n  }\n\n  this.buf.push('for (var ' + each.key + ' = 0, $$l = $$obj.length; ' + each.key + ' < $$l; ' + each.key + '++) {\\n'\n    + 'var ' + each.val + ' = $$obj[' + each.key + '];\\n');\n\n  this.visit(each.block);\n  this.buf.push('}');\n\n  if (each.alternative) {\n    this.buf.push('  } else {');\n    this.visit(each.alternative);\n    this.buf.push('  }');\n  }\n\n  this.buf.push(''\n    + '  } else {\\n'\n    + '    var $$l = 0;\\n'\n    + '    for (var ' + each.key + ' in $$obj) {\\n'\n    + '      $$l++;'\n    + '      var ' + each.val + ' = $$obj[' + each.key + '];\\n');\n\n  this.visit(each.block);\n  this.buf.push('}');\n\n  if (each.alternative) {\n    this.buf.push('if ($$l === 0) {');\n    this.visit(each.alternative);\n    this.buf.push('}');\n  }\n\n  this.buf.push('}');\n\n  this.buf.push('return tags;');\n  this.buf.push('}.call(this));');\n};\nCompiler.prototype.visitLiteral = function (literal) {\n  if (/[<>&]/.test(literal.str)) {\n    throw new Error('Plain Text cannot contain \"<\" or \">\" or \"&\" in react-jade');\n  } else if (literal.str.length !== 0) {\n    this.buf.push('tags.push(' + stringify(literal.str) + ')');\n  }\n};\nCompiler.prototype.visitMixinBlock = function(block){\n    this.buf.push('block && (tags = tags.concat(block.call(this)));');\n};\n\n\nCompiler.prototype.visitMixin = function(mixin) {\n    var name = 'jade_mixins[';\n    var args = mixin.args || '';\n    var block = mixin.block;\n    var attrs = mixin.attrs;\n    var attrsBlocks = mixin.attributeBlocks;\n    var pp = this.pp;\n    var dynamic = mixin.name[0]==='#';\n    var key = mixin.name;\n    if (dynamic) this.dynamicMixins = true;\n    name += (dynamic ? mixin.name.substr(2,mixin.name.length-3):'\"'+mixin.name+'\"')+']';\n\n    this.mixins[key] = this.mixins[key] || {used: false, instances: []};\n    if (mixin.call) {\n      this.mixins[key].used = true;\n      //if (pp) this.buf.push(\"jade_indent.push('\" + Array(this.indents + 1).join('  ') + \"');\")\n      if (block || attrs.length || attrsBlocks.length) {\n\n        this.buf.push('tags = tags.concat(' + name + '.call(this, {');\n\n        if (block) {\n          this.buf.push('block: function(){');\n          this.buf.push('var tags = [];');\n          // Render block with no indents, dynamically added when rendered\n          this.visit(mixin.block);\n          this.buf.push('return tags;');\n\n          if (attrs.length || attrsBlocks.length) {\n            this.buf.push('},');\n          } else {\n            this.buf.push('}');\n          }\n        }\n\n        if (attrsBlocks.length) {\n          if (attrs.length) {\n            var val = getAttributes(attrs);\n            attrsBlocks.unshift(val);\n          }\n          this.buf.push('attributes: jade_merge([' + attrsBlocks.join(',') + '])');\n        } else if (attrs.length) {\n          var val = getAttributes(attrs);\n          this.buf.push('attributes: ' + val);\n        }\n\n        if (args) {\n          this.buf.push('}, ' + args + '));');\n        } else {\n          this.buf.push('}));');\n        }\n\n      } else {\n        this.buf.push('tags = tags.concat(' + name + '.call(this, {}');\n        if (args) {\n          this.buf.push(', ' + args + '));');\n        } else {\n          this.buf.push('));');\n        }\n      }\n    } else {\n      var mixin_start = this.buf.length;\n      args = args ? args.split(',') : [];\n      var rest;\n      if (args.length && /^\\.\\.\\./.test(args[args.length - 1].trim())) {\n        rest = args.pop().trim().replace(/^\\.\\.\\./, '');\n      }\n      this.buf.push(name + ' = function(jade_mixin_options');\n      if (args.length) this.buf.push(',' + args.join(','));\n      this.buf.push('){');\n      this.buf.push('var block = (jade_mixin_options && jade_mixin_options.block), attributes = (jade_mixin_options && jade_mixin_options.attributes) || {};');\n      if (rest) {\n        this.buf.push('var ' + rest + ' = [];');\n        this.buf.push('for (jade_interp = ' + (args.length + 1) + '; jade_interp < arguments.length; jade_interp++) {');\n        this.buf.push('  ' + rest + '.push(arguments[jade_interp]);');\n        this.buf.push('}');\n      }\n      this.buf.push('var tags = [];');\n      this.visit(block);\n      this.buf.push('return tags;');\n      this.buf.push('};');\n      var mixin_end = this.buf.length;\n      this.mixins[key].instances.push({start: mixin_start, end: mixin_end});\n    }\n};\n\nCompiler.prototype.visitTag = function (tag) {\n  var name = tag.name;\n  if (/^[a-z]/.test(tag.name) && !tag.buffer) {\n    name = '\"' + name + '\"';\n  }\n  this.buf.push('tags.push(React.createElement.apply(React, ['+name);\n\n\n  if (tag.name === 'textarea' && tag.code && tag.code.buffer && tag.code.escape) {\n    tag.attrs.push({\n      name: 'value',\n      val: tag.code.val\n    });\n    tag.code = null;\n  }\n  var attrs;\n  if (tag.attributeBlocks.length) {\n    attrs = 'jade_fix_attrs(jade_merge([' + getAttributes(tag.attrs) + ',' + tag.attributeBlocks.join(',') + ']))';\n  } else {\n    attrs = getAttributes(tag.attrs, true);\n  }\n  this.buf.push(',' + attrs + ']');\n  if (tag.code || (tag.block && tag.block.nodes.length)) {\n    this.buf.push('.concat(function () { var tags = [];');\n    if (tag.code) this.visitCode(tag.code);\n    this.visit(tag.block);\n    this.buf.push('return tags;}.call(this))');\n  }\n  this.buf.push('))');\n};\nCompiler.prototype.visitText = function (text) {\n  if (/[<>&]/.test(text.val.replace(/&((#\\d+)|#[xX]([A-Fa-f0-9]+)|([^;\\W]+));?/g, ''))) {\n    throw new Error('Plain Text cannot contain \"<\" or \">\" or \"&\" in react-jade');\n  } else if (text.val.length !== 0) {\n    text.val = ent.decode(text.val);\n    this.buf.push('tags.push(' + stringify(text.val) + ')');\n  }\n};\n\nfunction getAttributes(attrs, fixAttributeNames){\n  var buf = [];\n  var classes = [];\n\n  attrs.forEach(function(attr){\n    var key = attr.name;\n    if (fixAttributeNames && key === 'for') key = 'htmlFor';\n    if (fixAttributeNames && key === 'maxlength') key = 'maxLength';\n    if (key.substr(0, 2) === 'on') {\n      var ast = uglify.parse('jade_interp = (' + attr.val + ')');\n      var val = ast.body[0].body.right;\n      if (val.TYPE === 'Call') {\n        if (val.expression.TYPE !== 'Dot' && val.expression.TYPE !== 'Sub') {\n          val.expression = new uglify.AST_Dot({\n            expression: val.expression,\n            property: 'bind'\n          });\n          val.args.unshift(new uglify.AST_Null({}));\n          attr.val = val.print_to_string();\n        } else if ((val.expression.TYPE === 'Dot' && val.expression.property !== 'bind') ||\n                   val.expression.TYPE == 'Sub')  {\n          var obj = val.expression.expression;\n          val.expression.expression = new uglify.AST_SymbolRef({name: 'jade_interp'});\n          val.expression = new uglify.AST_Dot({\n            expression: val.expression,\n            property: 'bind'\n          });\n          val.args.unshift(new uglify.AST_SymbolRef({name: 'jade_interp'}));\n          val = new uglify.AST_Seq({\n            car: new uglify.AST_Assign({\n              operator: '=',\n              left: new uglify.AST_SymbolRef({name: 'jade_interp'}),\n              right: obj\n            }),\n            cdr: val\n          });\n          attr.val = '(' + val.print_to_string() + ')';\n        }\n      }\n    }\n    if (/Link$/.test(key)) {\n      // transform: valueLink = this.state.name\n      // into:      valueLink = {value: this.state.name,requestChange:function(v){ this.setState({name:v})}.bind(this)}\n      var ast = uglify.parse('jade_interp = (' + attr.val + ')');\n      var val = ast.body[0].body.right;\n      if (val.TYPE === 'Dot' && val.expression.TYPE === 'Dot' &&\n          val.expression.expression.TYPE === 'This' && val.expression.property === 'state') {\n        attr.val = '{value:this.state.' + val.property + ',' +\n          'requestChange:function(v){this.setState({' + val.property + ':v})}.bind(this)}';\n      }\n    }\n    if (key === 'class') {\n      classes.push(attr.val);\n    } else if (key === 'style') {\n      if (isConstant(attr.val)) {\n        var val = toConstant(attr.val);\n        buf.push(stringify(key) + ': ' + stringify(fixStyle(val)));\n      } else {\n        buf.push(stringify(key) + ': jade_fix_style(' + attr.val + ')');\n      }\n    } else if (isConstant(attr.val)) {\n      var val = toConstant(attr.val);\n      buf.push(stringify(key) + ': ' + stringify(val));\n    } else {\n      buf.push(stringify(key) + ': ' + attr.val);\n    }\n  });\n  if (classes.length) {\n    if (classes.every(isConstant)) {\n      classes = stringify(joinClasses(classes.map(toConstant)));\n    } else {\n      classes = 'jade_join_classes([' + classes.join(',') + '])';\n    }\n    if (classes.length)\n      buf.push('\"' + (fixAttributeNames ? 'className' : 'class') + '\": ' + classes);\n  }\n  return '{' + buf.join(',') + '}';\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/java-script-compressor.js":"'use strict';\n\n/**\n * This file is contains a customised UglifyJS compressor.  The advantage of having this is\n * that we can generate slow, ugly but correct code and simply run it through this to clean\n * it up.  It's far simpler to just use `array.push` to add elements, but often you know the\n * list of elements up front and it's better to just use them as an array.\n */\nvar uglify = require('uglify-js');\n\nmodule.exports = Compressor;\nfunction Compressor(options) {\n  uglify.TreeTransformer.call(this, this.before, this.after);\n};\n\nCompressor.prototype = Object.create(uglify.TreeTransformer.prototype);\n\nCompressor.prototype.after = function(node) {\n  if (isVacuousFunction(node)) {\n    var fn = node.expression.expression;\n    if (fn.body.length > 0 && fn.body[0].TYPE === 'Return') {\n      return fn.body[0].value;\n    }\n  }\n  if (node.TYPE === 'Function') {\n    var returnStatement = getReturnStatement(node);\n    if (returnStatement) {\n      node.body = [returnStatement];\n      return node;\n    }\n  }\n  if (isConcattedArray(node)) {\n    node.expression.expression.elements = node.expression.expression.elements\n      .concat(node.args[0].elements);\n    return node.expression.expression;\n  }\n\n  if (isConstantApply(node)) {\n    node.expression = node.expression.expression;\n    node.args = node.args[1].elements;\n  }\n};\n\n// [...].concat([...])\nfunction isConcattedArray(node) {\n  return node.TYPE === 'Call' && node.expression.TYPE === 'Dot' &&\n    node.expression.property === 'concat' && node.expression.expression.TYPE === 'Array' &&\n    node.args.length === 1 && node.args[0].TYPE === 'Array';\n}\n\n// function () { ... }.call(this)\nfunction isVacuousFunction(node) {\n  return node.TYPE === 'Call' && node.expression.TYPE === 'Dot' &&\n    node.expression.property === 'call' && node.expression.expression.TYPE === 'Function' &&\n    node.expression.expression.argnames.length == 0 && node.args.length === 1 &&\n    node.args[0].TYPE === 'This';\n}\n\n// Foo.bar.apply(Foo, [...])\nfunction isConstantApply(node) {\n  return node.TYPE === 'Call' && node.expression.TYPE === 'Dot' &&\n    node.expression.property === 'apply' && node.expression.expression.TYPE === 'Dot' &&\n    node.expression.expression.expression.TYPE === 'SymbolRef' && node.args.length === 2 &&\n    node.args[0].TYPE === 'SymbolRef' &&\n    node.args[0].name === node.expression.expression.expression.name &&\n    node.args[1].TYPE === 'Array';\n}\n\n// foo.push(...)\nfunction isArrayPush(node, name) {\n  return node.TYPE === 'SimpleStatement' && node.body.TYPE === 'Call' &&\n    node.body.expression.TYPE === 'Dot' && node.body.expression.property === 'push' &&\n    node.body.expression.expression.TYPE === 'SymbolRef' && node.body.expression.expression.name === name;\n}\n\n// for `function () { var arr = []; arr.push(...); arr.push(...); return arr;}` get `[..., ...]`\nfunction getReturnStatement(node) {\n  var nodes = node.body;\n  if (nodes.length === 0) return new uglify.AST_Undefined({});\n  if (nodes[0].TYPE === 'Var' && nodes[0].definitions.length === 1 && nodes[0].definitions[0].value.TYPE === 'Array') {\n    var name = nodes[0].definitions[0].name.name;\n    var array = nodes[0].definitions[0].value;\n    var elements = array.elements;\n    for (var i = 1; isArrayPush(nodes[i], name) && i < nodes.length; i++) {\n      elements = elements.concat(nodes[i].body.args);\n    }\n    if (nodes[i].TYPE === 'Return' && nodes[i].value.TYPE === 'SymbolRef' && nodes[i].value.name === name) {\n      array.elements = elements;\n      nodes[i].value = array;\n      return nodes[i];\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/compile-file-client.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar compileClient = require('./compile-client');\n\nmodule.exports = compileFileClient;\nfunction compileFileClient(filename, options) {\n  var str = fs.readFileSync(filename, 'utf8').toString();\n  var options = options || {};\n  options.filename = path.resolve(filename);\n  return compileClient(str, options);\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/compile.js":"'use strict';\n\nvar React = require('react');\nvar parse = require('./parse');\n\nmodule.exports = compile;\nfunction compile(str, options){\n  options = options || { filename: '' };\n  return Function('React', parse(str, options))(React);\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/compile-file.js":"'use strict';\n\nvar React = require('react');\nvar parseFile = require('./parse-file');\n\nmodule.exports = compileFile;\nfunction compileFile(filename, options) {\n  return Function('React', parseFile(filename, options))(React);\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/parse-file.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar parse = require('./parse');\n\nmodule.exports = parseFile;\nfunction parseFile(filename, options) {\n  var str = fs.readFileSync(filename, 'utf8').toString();\n  var options = options || {};\n  options.filename = path.resolve(filename);\n  return parse(str, options);\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/jade-fix-attrs.js":"function jade_fix_attrs(attrs) {\n  attrs = attrs || {};\n  if ('for' in attrs) {\n    attrs.htmlFor = attrs['for'];\n    delete attrs['for'];\n  }\n  if ('maxlength' in attrs) {\n    attrs.maxLength = attrs['maxlength'];\n    delete attrs['maxlength'];\n  }\n  if ('class' in attrs) {\n    attrs.className = attrs['class'];\n    delete attrs['class'];\n  }\n  return attrs;\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/jade-fix-style.js":"function jade_fix_style(style) {\n  return typeof style === \"string\" ? style.split(\";\").filter(function (str) {\n    return str.split(\":\").length > 1;\n  }).reduce(function (obj, style) {\n    obj[style.split(\":\")[0]] = style.split(\":\").slice(1).join(\":\"); return obj;\n  }, {}) : style;\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/jade-join-classes.js":"function jade_join_classes(val) {\n  return (Array.isArray(val) ? val.map(jade_join_classes) :\n    (val && typeof val === \"object\") ? Object.keys(val).filter(function (key) { return val[key]; }) :\n      [val]\n  ).filter(function (val) { return val != null && val !== \"\"; }).join(\" \");\n}\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/jade-merge.js":"function jade_merge(a, b) {\n  if (arguments.length === 1) {\n    var attrs = a[0];\n    for (var i = 1; i < a.length; i++) {\n      attrs = jade_merge(attrs, a[i]);\n    }\n    return attrs;\n  }\n\n  for (var key in b) {\n    if (key === 'class') {\n      a[key] = jade_join_classes([a[key], b[key]]);\n    } else if (key === 'style') {\n      a[key] = jade_fix_style(a[key]) || {};\n      b[key] = jade_fix_style(b[key]) || {};\n      for (var style in b[key]) {\n        a[key][style] = b[key][style];\n      }\n    } else {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n};\n","/home/travis/build/npmtest/node-npmtest-react-jade/node_modules/react-jade/lib/utils/set-locals.js":"function setLocals(locals) {\n  var render = this;\n  function newRender(additionalLocals) {\n    var newLocals = {};\n    for (var key in locals) {\n      newLocals[key] = locals[key];\n    }\n    if (additionalLocals) {\n      for (var key in additionalLocals) {\n        newLocals[key] = additionalLocals[key];\n      }\n    }\n    return render.call(this, newLocals);\n  }\n  newRender.locals = setLocals;\n  return newRender;\n}\n"}